plot(grafo_prueba, vertex.color = pal[ceiling(closeness(grafo_prueba)*1000)])
heatmap(grafo_prueba)
heatmap(distances(grafo_prueba))
plot(distances(grafo_prueba))
plot(as_adjacency_matrix(grafo_prueba))
heatmap(as_adjacency_matrix(grafo_prueba))
as_adjacency_matrix(grafo_prueba)
as_adjacency_matrix(grafo_prueba,attr="a")
as_adjacency_matrix(grafo_prueba,attr="degree")
as_adjacency_matrix(grafo_prueba,sparse=F)
heatmap(as_adjacency_matrix(grafo_prueba,sparse=F))
heatmap(distances(grafo_prueba))
func_destructora_samp <- function(objeto_igraph, los_num_vertex=c(), los_name_vertex=c(),cuantos_desapar=c()){
cuantos_elimina <- c(ceiling(length(V(objeto_igraph))/100))
if (is.null(cuantos_desapar)==F){
cuantos_elimina <- cuantos_desapar
}
cuales_elimina <- sample(size=cuantos_elimina, x=c(1:length(V(objeto_igraph))))
if (is.null(los_num_vertex)==F){
cuales_elimina <- los_num_vertex
}
if (is.null(los_name_vertex)==F){
cuales_elimina <- los_num_vertex
}
new_igraph_objeto <- delete_vertices(objeto_igraph, cuales_elimina) %>% delete_vertices(los_name_vertex)
par(mfrow=c(2,1))
promedio1 <- mean(distances(objeto_igraph))
diametro1 <- diameter(objeto_igraph)
promedio2 <- mean(distances(new_igraph_objeto))
diametro2 <- diameter(new_igraph_objeto)
grafx1 <- plot(objeto_igraph)
grafx2 <- plot(new_igraph_objeto)
todo <- list(promedio1,diametro1,grafx1,promedio2,diametro2,grafx2,new_igraph_objeto)
par(mfrow=c(1,1))
return(todo)
}
func_destructora_samp(grafo_prueba,cuantos_desapar = 1)
func_destructora_samp(grafo_prueba,cuantos_desapar = 1)
func_destructora_samp(grafo_prueba,cuantos_desapar = 1)
func_destructora_samp(grafo_prueba,los_num_vertex =  3)
clustering_edges <- cluster_edge_betweenness(grafo_prueba)
plot(grafo_prueba, vertex.color = clustering_edges$membership)
list_adj_1 <- read.csv(paste0("/treeoflife.interactomes/","1000569.txt"), header=T, as.is=T)
list_adj_1 <- read.csv(paste0("treeoflife.interactomes/","1000569.txt"), header=T, as.is=T)
list_adj_1
library(igraph)
list_adj_1
graph_from_edgelist(as.matrix(list_adj_1))
dim(list_adj_1)
list_adj_1
list_adj_1 <- read.csv(paste0("treeoflife.interactomes/","1000569.txt"), header=F, as.is=F,sep=" ")
list_adj_1
dim(list_adj_1)
graph_from_edgelist(as.matrix(list_adj_1))
list_adj_1 <- read.csv(paste0("treeoflife.interactomes/","1000569.txt"), header=F, as.is=F,sep=" ")
list_adj_1
dim(list_adj_1)
red_1 <- graph_from_edgelist(as.matrix(list_adj_1))
list_adj_2 <- read.csv(paste0("treeoflife.interactomes/","428126.txt"), header=F, as.is=F,sep=" ")
list_adj_2
dim(list_adj_2)
red_2 <- graph_from_edgelist(as.matrix(list_adj_2))
list_adj_3 <- read.csv(paste0("treeoflife.interactomes/","702450.txt"), header=F, as.is=F,sep=" ")
list_adj_3
dim(list_adj_3)
red_3 <- graph_from_edgelist(as.matrix(list_adj_3))
red_1
red_2
red_3
library(igraph)
list_adj_1 <- read.csv(paste0("treeoflife.interactomes/","1000569.txt"), header=F, as.is=F,sep=" ")
list_adj_1
dim(list_adj_1)
red_1 <- graph_from_edgelist(as.matrix(list_adj_1))
list_adj_2 <- read.csv(paste0("treeoflife.interactomes/","469606.txt"), header=F, as.is=F,sep=" ")
list_adj_2
dim(list_adj_2)
red_2 <- graph_from_edgelist(as.matrix(list_adj_2))
list_adj_3 <- read.csv(paste0("treeoflife.interactomes/","562983.txt"), header=F, as.is=F,sep=" ")
list_adj_3
dim(list_adj_3)
red_3 <- graph_from_edgelist(as.matrix(list_adj_3))
red_1
red_2
red_3
library(igraph)
list_adj_1 <- read.csv(paste0("treeoflife.interactomes/","33178.txt"), header=F, as.is=F,sep=" ")
list_adj_1
dim(list_adj_1)
red_1 <- graph_from_edgelist(as.matrix(list_adj_1))
list_adj_2 <- read.csv(paste0("treeoflife.interactomes/","233412.txt"), header=F, as.is=F,sep=" ")
list_adj_2
dim(list_adj_2)
red_2 <- graph_from_edgelist(as.matrix(list_adj_2))
list_adj_3 <- read.csv(paste0("treeoflife.interactomes/","713887.txt"), header=F, as.is=F,sep=" ")
list_adj_3
dim(list_adj_3)
red_3 <- graph_from_edgelist(as.matrix(list_adj_3))
red_1
red_2
red_3
library(igraph)
list_adj_1 <- read.csv(paste0("treeoflife.interactomes/","1000569.txt"), header=F, as.is=F,sep=" ")
list_adj_1
dim(list_adj_1)
red_1 <- graph_from_edgelist(as.matrix(list_adj_1))
list_adj_2 <- read.csv(paste0("treeoflife.interactomes/","469606.txt"), header=F, as.is=F,sep=" ")
list_adj_2
dim(list_adj_2)
red_2 <- graph_from_edgelist(as.matrix(list_adj_2))
list_adj_3 <- read.csv(paste0("treeoflife.interactomes/","562983.txt"), header=F, as.is=F,sep=" ")
list_adj_3
dim(list_adj_3)
red_3 <- graph_from_edgelist(as.matrix(list_adj_3))
red_1
red_2
red_3
func_muy_descriptora <- function(grafo_demo, modo_para_degree=1, valor_max=0, ...){
los_tipos_de_degree <- c("all","in","out")
plot(grafo_demo)
grafx_red <- recordPlot()
grado_nodos <- degree(grafo_demo,mode=los_tipos_de_degree[modo_para_degree])
distr_grado <- degree.distribution(grafo_demo,mode=los_tipos_de_degree[modo_para_degree])
distr_grado_plus_indexes <- rbind(0:(length(dist_grado)-1),dist_grado)
plot(dist_grado_plus_indexes[2,]~dist_grado_plus_indexes[1,])
grafx_dist_lineal <- recordPlot()
distr_logs <- log(dist_grado_plus_indexes+0.0001)
plot(dist_logs[2,]~dist_logs[1,])
grafx_dist_log <- recordPlot()
prom_grado <- mean(grado_nodos)
distancias <- distances(grafo_demo)
if (valor_max != 0) {distancias[distancias > valor_max] <- valor_max}
dist_promedio <- mean(distancias)
dist_nodo_a_red <- c()
for (nodo in 1:dim(distancias)[1]){
dist_nodo_a_red <- c(dist_nodo_a_red,mean(distancias[nodo,]))
}
dist_nodo_a_red
num_conec <- length(E(grafo_demo))
num_nodos <- length(V(grafo_demo))
densidad <- num_conec / (num_nodos*(num_nodos-1))
if(!is.directed(grafo_demo)){densidad <- densidad*2}
#as_adjacency_matrix(
#  graph,
#  type = c("both", "upper", "lower"),
#  attr = NULL,
#  edges = FALSE,
#  names = TRUE,
#  sparse = igraph_opt("sparsematrices")
#)
matriz_adj <- as_adjacency_matrix(grafo_demo)
list_adj <- as_adj_list(grafo_demo)
diametro <- diameter(grafo_demo)
coefs_clust <- transitivity(grafo_demo, type="local")
clust_glob <- transitivity(grafo_demo)
todo <- list(grafx_red,grado_nodos,distr_grado_plus_indexes,grafx_dist_lineal,distr_logs,grafx_dist_log,prom_grado,distancias,dist_promedio,dist_nodo_a_red,num_conec,num_nodos,densidad,matriz_adj,list_adj,diametro,coefs_clust,clust_glob)
}
func_reversora_de_direccion <- function(grafo_demo){
grafo_revert <- NULL
if(is_directed(grafo_demo)){grafo_revert <-as.undirected(grafo_demo)}
if(!is_directed(grafo_demo)){grafo_revert <-as.directed(grafo_demo)}
return(grafo_revert)
}
SimplePathsLengthN <- function(graph, node1, node2, pathlength=2) {
SP = list()
if(pathlength == 1) {
if(node2 %in% neighbors(graph, node1)) {
SP[[1]] = c(node1, node2) }
return(SP) }
Nbrs2 = neighbors(graph, node2)
for(nbr2 in Nbrs2) {
ASPn2 = SimplePathsLengthN(graph, node1, nbr2, pathlength-1)
for(i in seq_along(ASPn2)) {
if(!(node2 %in% ASPn2[[i]])) {
SP = append(SP, list(c(ASPn2[[i]], node2))) }
}
}
return(SP)
}
#
trayectorias_largas <- function(red_igraph, nodo1, nodo2, min=c(), max=c()){
tam_min <- distances(red_igraph)[nodo1,nodo2] #Utilizamos como minimo la trayectoria minima, para
#no buscar caminos más pequeños de lo posible.
tam_max <- length(E(red_igraph)) #La trayectoria más larga en una red dirigida y no pesada no debería poder ser más grande que el conjunto de todas las conexiones, así que utilizaremos este número como el límite superior de nuestra función.
if (is.null(min)==F){tam_min <- min}
if (is.null(max)==F){tam_max <- max} #Asignamos minimo y maximo si se especificaron al correr la funcion. Podria considerar si los argumentos estan especificados desde antes para no tener que calcular tam_min y tam_max pero no son operaciones caras, asi que no hay problema en este caso.
trayectoria_temp <- 0
trayectorias_mem <- c()
for (tamaño in tam_min:tam_max){
trayectoria_temp <- SimplePathsLengthN(red_igraph,nodo1,nodo2,pathlength=tamaño)
if (is.null(unlist(trayectoria_temp))){trayectoria_temp <- list("No hay")} #Esto nos ayuda a evitar un error si no hay caminos de ese tamaño.
trayectoria_temp <- cbind(tamaño, trayectoria_temp)
trayectorias_mem <- rbind(trayectorias_mem,trayectoria_temp)
}
return(trayectorias_mem)
}
SimplePathsLengthN <- function(graph, node1, node2, pathlength=2) {
SP = list()
if(pathlength == 1) {
if(node2 %in% neighbors(graph, node1)) {
SP[[1]] = c(node1, node2) }
return(SP) }
Nbrs2 = neighbors(graph, node2)
for(nbr2 in Nbrs2) {
ASPn2 = SimplePathsLengthN(graph, node1, nbr2, pathlength-1)
for(i in seq_along(ASPn2)) {
if(!(node2 %in% ASPn2[[i]])) {
SP = append(SP, list(c(ASPn2[[i]], node2))) }
}
}
return(SP)
}
#
trayectorias_largas <- function(red_igraph, nodo1, nodo2, min=c(), max=c()){
tam_min <- distances(red_igraph)[nodo1,nodo2] #Utilizamos como minimo la trayectoria minima, para
#no buscar caminos más pequeños de lo posible.
tam_max <- length(E(red_igraph)) #La trayectoria más larga en una red dirigida y no pesada no debería poder ser más grande que el conjunto de todas las conexiones, así que utilizaremos este número como el límite superior de nuestra función.
if (is.null(min)==F){tam_min <- min}
if (is.null(max)==F){tam_max <- max} #Asignamos minimo y maximo si se especificaron al correr la funcion. Podria considerar si los argumentos estan especificados desde antes para no tener que calcular tam_min y tam_max pero no son operaciones caras, asi que no hay problema en este caso.
trayectoria_temp <- 0
trayectorias_mem <- c()
for (tamaño in tam_min:tam_max){
trayectoria_temp <- SimplePathsLengthN(red_igraph,nodo1,nodo2,pathlength=tamaño)
if (is.null(unlist(trayectoria_temp))){trayectoria_temp <- list("No hay")} #Esto nos ayuda a evitar un error si no hay caminos de ese tamaño.
trayectoria_temp <- cbind(tamaño, trayectoria_temp)
trayectorias_mem <- rbind(trayectorias_mem,trayectoria_temp)
}
return(trayectorias_mem)
}
func_destructora_samp <- function(objeto_igraph, los_num_vertex=c(), los_name_vertex=c(),cuantos_desapar=c()){
cuantos_elimina <- c(ceiling(length(V(objeto_igraph))/100))
if (is.null(cuantos_desapar)==F){
cuantos_elimina <- cuantos_desapar
}
cuales_elimina <- sample(size=cuantos_elimina, x=c(1:length(V(objeto_igraph))))
if (is.null(los_num_vertex)==F){
cuales_elimina <- los_num_vertex
}
if (is.null(los_name_vertex)==F){
cuales_elimina <- los_num_vertex
}
new_igraph_objeto <- delete_vertices(objeto_igraph, cuales_elimina) %>% delete_vertices(los_name_vertex)
par(mfrow=c(2,1))
promedio1 <- mean(distances(objeto_igraph))
diametro1 <- diameter(objeto_igraph)
promedio2 <- mean(distances(new_igraph_objeto))
diametro2 <- diameter(new_igraph_objeto)
grafx1 <- plot(objeto_igraph)
grafx2 <- plot(new_igraph_objeto)
todo <- list(promedio1,diametro1,grafx1,promedio2,diametro2,grafx2,new_igraph_objeto)
par(mfrow=c(1,1))
return(todo)
}
func_muy_descriptora(red1)
library(igraph)
list_adj_1 <- read.csv(paste0("treeoflife.interactomes/","1000569.txt"), header=F, as.is=F,sep=" ")
list_adj_1
dim(list_adj_1)
red_1 <- graph_from_edgelist(as.matrix(list_adj_1))
list_adj_2 <- read.csv(paste0("treeoflife.interactomes/","469606.txt"), header=F, as.is=F,sep=" ")
list_adj_2
dim(list_adj_2)
red_2 <- graph_from_edgelist(as.matrix(list_adj_2))
list_adj_3 <- read.csv(paste0("treeoflife.interactomes/","562983.txt"), header=F, as.is=F,sep=" ")
list_adj_3
dim(list_adj_3)
red_3 <- graph_from_edgelist(as.matrix(list_adj_3))
red_1
red_2
red_3
func_muy_descriptora(red1)
red_1
func_muy_descriptora(grafo_demo=red1)
func_muy_descriptora(grafo_demo=red_1, modo_para_degree=1)
#Promedio conectividades
descrita_red_1[[7]]
descrita_red_1 <- func_muy_descriptora(grafo_demo=red_1, modo_para_degree=1)
cat("\014")
descrita_red_1 <- func_muy_descriptora(grafo_demo=red_1, modo_para_degree=1)
descrita_red_1 <- func_muy_descriptora(grafo_demo=red_1, modo_para_degree=1)
descrita_red_2 <- func_muy_descriptora(grafo_demo=red_2, modo_para_degree=1)
descrita_red_3 <- func_muy_descriptora(grafo_demo=red_3, modo_para_degree=1)
#Promedio conectividades
descrita_red_1[[7]]
#Densidad
descrita_red_1[["densidad"]]
#Densidad
descrita_red_1[[13]]
components(red_1)
nombres_1 <- names(sort(degree(red_1,mode="all"),decreasing=T)[1:10])
nombres_1
n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc <- function(base,var=10,names=c()){
for (a in 1:var){
print(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=nombres[1:a]))}
}
n_destruc(base=red_1,var=10,names=nombres_1)
nombres_1 <- names(sort(degree(red_1,mode="all"),decreasing=T)[1:10])
nombres_2 <- names(sort(degree(red_2,mode="all"),decreasing=T)[1:10])
nombres_3 <- names(sort(degree(red_3,mode="all"),decreasing=T)[1:10])
n_destruc <- function(base,var=10,names=c()){
for (a in 1:var){
print(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=nombres[1:a]))}
}
n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc <- function(base,var=10,names=c()){
for (a in 1:var){
print(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=names[1:a]))}
}
n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc <- function(base,var=10,names=c()){
for (a in 1:var){
print(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=names[1:a])[[7]])}
}
n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc <- function(base,var=10,names=c()){
for (a in 1:var){
print(    components(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=names[1:a])[[7]])   )}
}
n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc_data <- c()
n_destruc <- function(base,var=10,names=c()){
for (a in 1:var){
n_destruc_data <- list(n_destruc_data,    components(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=names[1:a])[[7]])   )}
}
n_destruc_data
n_destruc_data <- c()
n_destruc <- function(base,var=10,names=c()){
for (a in 1:var){
n_destruc_data <- list(n_destruc_data,    components(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=names[1:a])[[7]])   )}
return(n_destruc_data)
}
n_destruc_data_1 <- n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc_data <- c()
n_destruc <- function(base,var=10,names=c(),n_destruc_data=c()){
for (a in 1:var){
n_destruc_data <- list(n_destruc_data,    components(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=names[1:a])[[7]])   )}
return(n_destruc_data)
}
n_destruc_data_1 <- n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc_data_1
dim(n_destruc_data_1)
length(n_destruc_data_1)
n_destruc_data_1 <- n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc_data_1
n_destruc_data <- c()
n_destruc <- function(base,var=10,names=c(),n_destruc_data=c()){
for (a in 1:var){
n_destruc_data <- list(n_destruc_data,    count_components(func_destructora_samp(base,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=names[1:a])[[7]])   )}
return(n_destruc_data)
}
n_destruc_data_1 <- n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc_data_1
n_destruc_data_1 <- n_destruc(base=red_1,var=10,names=nombres_1)
n_destruc_data_2 <- n_destruc(base=red_2,var=10,names=nombres_2)
n_destruc_data_3 <- n_destruc(base=red_3,var=10,names=nombres_3)
n_destruc_data_1
n_destruc_data_2
n_destruc_data_3
n_destruc_data_1
n_destruc_data_2
n_destruc_data_3
componentes_data_1 <- n_destruc(base=red_1,var=10,names=nombres_1)
componentes_data_2 <- n_destruc(base=red_2,var=10,names=nombres_2)
componentes_data_3 <- n_destruc(base=red_3,var=10,names=nombres_3)
###Numero de componentes al ir quitando los nodos mas importantes de la red.
#Te los da en formato de lista, con un NULL inicial, seguido de el numero de componentes al quitar 1, luego 2, etc.
componentes_data_1
componentes_data_2
componentes_data_3
red_1
func_destructora_samp(red_1,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=nombres_1[1:10])[[7]]
distances(red_1)
mean(distances(red_1)[which(distancesred_1)<12000)])
mean(distances(red_1)[which(distances(red_1)<12000)])
mean(distances(red_1)[which(distances(red_1)<1000000)])
mean(distances(red_1)[which(distances(red_1)<1000)])
mean(distances(red_1_quitando_nodos)[which(distances(red_1_quitando_nodos)<1000)])
red_1_quitando_nodos <- func_destructora_samp(red_1,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=nombres_1[1:10])[[7]]
red_2_quitando_nodos <- func_destructora_samp(red_2,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=nombres_2[1:10])[[7]]
red_3_quitando_nodos <- func_destructora_samp(red_3,cuantos_desapar = 0,los_num_vertex = NULL,los_name_vertex=nombres_3[1:10])[[7]]
mean(distances(red_1)[which(distances(red_1)<1000)])
mean(distances(red_1_quitando_nodos)[which(distances(red_1_quitando_nodos)<1000)])
nombres_1
any(V(red_1)$name=="HMPREF1040_1485")
any(V(red_1_quitando_nodos)$name=="HMPREF1040_1485")
any(V(red_1)$name==nombres_1[1])
any(V(red_1_quitando_nodos)$name==nombres_1[1])
any(V(red_1)$name==nombres_1[2])
any(V(red_1_quitando_nodos)$name==nombres_1[2])
length(V(red_1))
length(V(red_1_quitando_nodos))
sort(degree(red_1,mode="all"),decreasing=T)
nombres_1
any(V(red_1)$name==nombres_1[1])
any(V(red_1_quitando_nodos)$name==nombres_1[1])
any(V(red_2)$name==nombres_1[1])
any(V(red_2_quitando_nodos)$name==nombres_1[1])
any(V(red_3)$name==nombres_1[1])
any(V(red_3_quitando_nodos)$name==nombres_1[1])
any(V(red_1)$name==nombres_1[1])
any(V(red_1_quitando_nodos)$name==nombres_1[1])
any(V(red_2)$name==nombres_2[1])
any(V(red_2_quitando_nodos)$name==nombres_2[1])
any(V(red_3)$name==nombres_3[1])
any(V(red_3_quitando_nodos)$name==nombres_3[1])
length(V(red_1))
length(V(red_1_quitando_nodos))
length(V(red_2))
length(V(red_2_quitando_nodos))
length(V(red_3))
length(V(red_3_quitando_nodos))
compara_las_dis <- function(red_normal,red_nodos_quitados){
dato_distancias_red <- mean(distances(red_normal)[which(distances(red_normal)<1000000)])
dato_distancias_quitados <- mean(distances(red_nodos_quitados)[which(distances(red_nodos_quitados)<1000000)])
dato_dist_comparativo <- c(dato_distancias_red,dato_distancias_quitados,dato_distancias_red-dato_distancias_quitados)
return(dato_dist_comparativo)
}
compara_las_dis(red_normal=red_1,red_nodos_quitados = red_1_quitando_nodos)
compara_las_dis <- function(red_normal,red_nodos_quitados){
dato_distancias_red <- mean(distances(red_normal)[which(distances(red_normal)<1000000)])
dato_distancias_quitados <- mean(distances(red_nodos_quitados)[which(distances(red_nodos_quitados)<1000000)])
dato_dist_comparativo <- c(dato_distancias_red,dato_distancias_quitados,dato_distancias_red-dato_distancias_quitados)
return(dato_dist_comparativo)
}
robustez_1 <- compara_las_dis(red_normal=red_1,red_nodos_quitados = red_1_quitando_nodos)
robustez_2 <- compara_las_dis(red_normal=red_2,red_nodos_quitados = red_2_quitando_nodos)
robustez_3 <- compara_las_dis(red_normal=red_3,red_nodos_quitados = red_3_quitando_nodos)
###Comparacion de robustez
#Distancia media en la red original, en la red con menos nodos, y su diferencia
robustez_1
robustez_2
robustez_3
########## Promedio conectividades ##########
descrita_red_1[[7]]
descrita_red_2[[7]]
descrita_red_3[[7]]
########## Densidad ##########
descrita_red_1[[13]]
descrita_red_2[[13]]
descrita_red_3[[13]]
nombres_3
library(igraphdata)
data(karate)
base_zach
base_zach <- data(karate)
base_zach
library(igraphdata)
base_zach <- data("karate")
base_zach
karate
base_zach <- karate
base_zach
base_zach <- karate
base_zach
plot(base_zach)
v(base_zach)$name == Mr Hi
v(base_zach)$name
V(base_zach)$name
V(base_zach)$name == "Mr Hi" | "John A"
V(base_zach)$name == "Mr Hi"
V(base_zach)$name == "Mr Hi"
V(base_zach)$name == "John A"
#Lideres primero y ultimo
length(V(base_zach))
V(base_zach)[1,34]$shape <- "sphere"
V(base_zach)[c(1,34)]$shape <- "sphere"
plot(base_zach)
V(base_zach)[c(1,34)]$size <- 20
plot(base_zach)
base_zach <- karate
V(base_zach)[c(1,34)]$size <- 20
plot(base_zach)
V(base_zach)[c(1,34)]$size <- 20
plot(base_zach)
base_zach <- karate
V(base_zach)[c(1,34)]$color <- "white"
plot(base_zach)
#nombres nodos mas importantes
names(sort(degree(red_1,mode="all"),decreasing=T)[1:2]
#nombres nodos mas importantes
names(sort(degree(red_1,mode="all"),decreasing=T)[1:2])
#nombres nodos mas importantes
names(sort(degree(red_1,mode="all"),decreasing=T)[1:2])
#nombres nodos mas importantes
names(sort(degree(base_zach,mode="all"),decreasing=T)[1:2])
clustering_optimal <- cluster_optimal(base_zach)
plot(base_zach, vertex.color = clustering_optimal$membership)
help(cluster_optimal)
clustering_edges <- cluster_edge_betweenness(base_zach)
plot(base_zach, vertex.color = clustering_edges$membership)
clustering_spinglass <- cluster_spinglass(base_zach)
plot(base_zach, vertex.color = clustering_spinglass$membership)
plot(base_zach)
clustering_spinglass <- cluster_spinglass(base_zach)
plot(base_zach, vertex.color = clustering_spinglass$membership)
clustering_spinglass <- cluster_spinglass(base_zach)
plot(base_zach, vertex.color = clustering_spinglass$membership)
clustering_spinglass <- cluster_spinglass(base_zach)
plot(base_zach, vertex.color = clustering_spinglass$membership)
plot(base_zach, vertex.color = clustering_optimal$membership)
plot(base_zach, vertex.color = clustering_spinglass$membership)
plot(base_zach, vertex.color = clustering_optimal$membership)
plot(base_zach, vertex.color = clustering_spinglass$membership)
plot(base_zach, vertex.color = clustering_edges$membership)
plot(base_zach, vertex.color = clustering_spinglass$membership)
plot(base_zach, vertex.color = clustering_optimal$membership)
plot(base_zach, vertex.color = clustering_spinglass$membership)
plot(base_zach, vertex.color = clustering_optimal$membership)
plot(base_zach, vertex.color = clustering_spinglass$membership)
plot(base_zach, vertex.color = clustering_edges$membership)
plot(base_zach, vertex.color = clustering_optimal$membership)
